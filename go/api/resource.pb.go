// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.29.1
// source: resource.proto

package api

import (
	_ "github.com/golang/protobuf/ptypes/any"
	duration "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Protocol int32

const (
	Protocol_UNKNOWN Protocol = 0
	Protocol_HTTP    Protocol = 1
	Protocol_HTTPS   Protocol = 2
	Protocol_TLS     Protocol = 3
	Protocol_TCP     Protocol = 4
	Protocol_HBONE   Protocol = 5
)

// Enum value maps for Protocol.
var (
	Protocol_name = map[int32]string{
		0: "UNKNOWN",
		1: "HTTP",
		2: "HTTPS",
		3: "TLS",
		4: "TCP",
		5: "HBONE",
	}
	Protocol_value = map[string]int32{
		"UNKNOWN": 0,
		"HTTP":    1,
		"HTTPS":   2,
		"TLS":     3,
		"TCP":     4,
		"HBONE":   5,
	}
)

func (x Protocol) Enum() *Protocol {
	p := new(Protocol)
	*p = x
	return p
}

func (x Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_proto_enumTypes[0].Descriptor()
}

func (Protocol) Type() protoreflect.EnumType {
	return &file_resource_proto_enumTypes[0]
}

func (x Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Protocol.Descriptor instead.
func (Protocol) EnumDescriptor() ([]byte, []int) {
	return file_resource_proto_rawDescGZIP(), []int{0}
}

type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*Resource_Bind
	//	*Resource_Listener
	//	*Resource_Route
	Kind isResource_Kind `protobuf_oneof:"kind"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_resource_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_resource_proto_rawDescGZIP(), []int{0}
}

func (m *Resource) GetKind() isResource_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Resource) GetBind() *Bind {
	if x, ok := x.GetKind().(*Resource_Bind); ok {
		return x.Bind
	}
	return nil
}

func (x *Resource) GetListener() *Listener {
	if x, ok := x.GetKind().(*Resource_Listener); ok {
		return x.Listener
	}
	return nil
}

func (x *Resource) GetRoute() *Route {
	if x, ok := x.GetKind().(*Resource_Route); ok {
		return x.Route
	}
	return nil
}

type isResource_Kind interface {
	isResource_Kind()
}

type Resource_Bind struct {
	Bind *Bind `protobuf:"bytes,1,opt,name=bind,proto3,oneof"`
}

type Resource_Listener struct {
	Listener *Listener `protobuf:"bytes,2,opt,name=listener,proto3,oneof"`
}

type Resource_Route struct {
	Route *Route `protobuf:"bytes,3,opt,name=route,proto3,oneof"`
}

func (*Resource_Bind) isResource_Kind() {}

func (*Resource_Listener) isResource_Kind() {}

func (*Resource_Route) isResource_Kind() {}

type Bind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *Bind) Reset() {
	*x = Bind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bind) ProtoMessage() {}

func (x *Bind) ProtoReflect() protoreflect.Message {
	mi := &file_resource_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bind.ProtoReflect.Descriptor instead.
func (*Bind) Descriptor() ([]byte, []int) {
	return file_resource_proto_rawDescGZIP(), []int{1}
}

func (x *Bind) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Bind) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type Listener struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique key
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// User facing name; may not be unique
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BindKey string `protobuf:"bytes,3,opt,name=bind_key,json=bindKey,proto3" json:"bind_key,omitempty"`
	// User facing Gateway name
	GatewayName string     `protobuf:"bytes,4,opt,name=gateway_name,json=gatewayName,proto3" json:"gateway_name,omitempty"`
	Hostname    string     `protobuf:"bytes,5,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Protocol    Protocol   `protobuf:"varint,6,opt,name=protocol,proto3,enum=agentgateway.dev.resource.Protocol" json:"protocol,omitempty"`
	Tls         *TLSConfig `protobuf:"bytes,7,opt,name=tls,proto3" json:"tls,omitempty"`
}

func (x *Listener) Reset() {
	*x = Listener{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Listener) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Listener) ProtoMessage() {}

func (x *Listener) ProtoReflect() protoreflect.Message {
	mi := &file_resource_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Listener.ProtoReflect.Descriptor instead.
func (*Listener) Descriptor() ([]byte, []int) {
	return file_resource_proto_rawDescGZIP(), []int{2}
}

func (x *Listener) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Listener) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Listener) GetBindKey() string {
	if x != nil {
		return x.BindKey
	}
	return ""
}

func (x *Listener) GetGatewayName() string {
	if x != nil {
		return x.GatewayName
	}
	return ""
}

func (x *Listener) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Listener) GetProtocol() Protocol {
	if x != nil {
		return x.Protocol
	}
	return Protocol_UNKNOWN
}

func (x *Listener) GetTls() *TLSConfig {
	if x != nil {
		return x.Tls
	}
	return nil
}

type TLSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cert       []byte `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
	PrivateKey []byte `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
}

func (x *TLSConfig) Reset() {
	*x = TLSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSConfig) ProtoMessage() {}

func (x *TLSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_resource_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSConfig.ProtoReflect.Descriptor instead.
func (*TLSConfig) Descriptor() ([]byte, []int) {
	return file_resource_proto_rawDescGZIP(), []int{3}
}

func (x *TLSConfig) GetCert() []byte {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *TLSConfig) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

type Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique key
	Key         string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	ListenerKey string `protobuf:"bytes,2,opt,name=listener_key,json=listenerKey,proto3" json:"listener_key,omitempty"`
	// User facing rule name. May not be unique.
	RuleName string `protobuf:"bytes,3,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	// User facing route name May not be unique.
	RouteName     string          `protobuf:"bytes,4,opt,name=route_name,json=routeName,proto3" json:"route_name,omitempty"`
	Hostnames     []string        `protobuf:"bytes,5,rep,name=hostnames,proto3" json:"hostnames,omitempty"`
	Matches       []*RouteMatch   `protobuf:"bytes,6,rep,name=matches,proto3" json:"matches,omitempty"`
	Filters       []*RouteFilter  `protobuf:"bytes,7,rep,name=filters,proto3" json:"filters,omitempty"`
	Backends      []*RouteBackend `protobuf:"bytes,8,rep,name=backends,proto3" json:"backends,omitempty"`
	TrafficPolicy *TrafficPolicy  `protobuf:"bytes,9,opt,name=traffic_policy,json=trafficPolicy,proto3" json:"traffic_policy,omitempty"`
}

func (x *Route) Reset() {
	*x = Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_resource_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_resource_proto_rawDescGZIP(), []int{4}
}

func (x *Route) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Route) GetListenerKey() string {
	if x != nil {
		return x.ListenerKey
	}
	return ""
}

func (x *Route) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *Route) GetRouteName() string {
	if x != nil {
		return x.RouteName
	}
	return ""
}

func (x *Route) GetHostnames() []string {
	if x != nil {
		return x.Hostnames
	}
	return nil
}

func (x *Route) GetMatches() []*RouteMatch {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *Route) GetFilters() []*RouteFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *Route) GetBackends() []*RouteBackend {
	if x != nil {
		return x.Backends
	}
	return nil
}

func (x *Route) GetTrafficPolicy() *TrafficPolicy {
	if x != nil {
		return x.TrafficPolicy
	}
	return nil
}

type TcpRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string          `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	ListenerKey string          `protobuf:"bytes,2,opt,name=listener_key,json=listenerKey,proto3" json:"listener_key,omitempty"`
	RuleName    string          `protobuf:"bytes,3,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	RouteName   string          `protobuf:"bytes,4,opt,name=route_name,json=routeName,proto3" json:"route_name,omitempty"`
	Hostnames   []string        `protobuf:"bytes,5,rep,name=hostnames,proto3" json:"hostnames,omitempty"` // for TLS only
	Backends    []*RouteBackend `protobuf:"bytes,8,rep,name=backends,proto3" json:"backends,omitempty"`
}

func (x *TcpRoute) Reset() {
	*x = TcpRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpRoute) ProtoMessage() {}

func (x *TcpRoute) ProtoReflect() protoreflect.Message {
	mi := &file_resource_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpRoute.ProtoReflect.Descriptor instead.
func (*TcpRoute) Descriptor() ([]byte, []int) {
	return file_resource_proto_rawDescGZIP(), []int{5}
}

func (x *TcpRoute) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TcpRoute) GetListenerKey() string {
	if x != nil {
		return x.ListenerKey
	}
	return ""
}

func (x *TcpRoute) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *TcpRoute) GetRouteName() string {
	if x != nil {
		return x.RouteName
	}
	return ""
}

func (x *TcpRoute) GetHostnames() []string {
	if x != nil {
		return x.Hostnames
	}
	return nil
}

func (x *TcpRoute) GetBackends() []*RouteBackend {
	if x != nil {
		return x.Backends
	}
	return nil
}

type TrafficPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackendRequestTimeout *duration.Duration `protobuf:"bytes,1,opt,name=backend_request_timeout,json=backendRequestTimeout,proto3" json:"backend_request_timeout,omitempty"`
	RequestTimeout        *duration.Duration `protobuf:"bytes,2,opt,name=request_timeout,json=requestTimeout,proto3" json:"request_timeout,omitempty"`
}

func (x *TrafficPolicy) Reset() {
	*x = TrafficPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicy) ProtoMessage() {}

func (x *TrafficPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_resource_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicy.ProtoReflect.Descriptor instead.
func (*TrafficPolicy) Descriptor() ([]byte, []int) {
	return file_resource_proto_rawDescGZIP(), []int{6}
}

func (x *TrafficPolicy) GetBackendRequestTimeout() *duration.Duration {
	if x != nil {
		return x.BackendRequestTimeout
	}
	return nil
}

func (x *TrafficPolicy) GetRequestTimeout() *duration.Duration {
	if x != nil {
		return x.RequestTimeout
	}
	return nil
}

type RouteMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path        *PathMatch     `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Headers     []*HeaderMatch `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty"`
	Method      *MethodMatch   `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	QueryParams []*QueryMatch  `protobuf:"bytes,4,rep,name=query_params,json=queryParams,proto3" json:"query_params,omitempty"`
}

func (x *RouteMatch) Reset() {
	*x = RouteMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteMatch) ProtoMessage() {}

func (x *RouteMatch) ProtoReflect() protoreflect.Message {
	mi := &file_resource_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteMatch.ProtoReflect.Descriptor instead.
func (*RouteMatch) Descriptor() ([]byte, []int) {
	return file_resource_proto_rawDescGZIP(), []int{7}
}

func (x *RouteMatch) GetPath() *PathMatch {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *RouteMatch) GetHeaders() []*HeaderMatch {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *RouteMatch) GetMethod() *MethodMatch {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *RouteMatch) GetQueryParams() []*QueryMatch {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

type PathMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*PathMatch_Exact
	//	*PathMatch_PathPrefix
	//	*PathMatch_Regex
	Kind isPathMatch_Kind `protobuf_oneof:"kind"`
}

func (x *PathMatch) Reset() {
	*x = PathMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathMatch) ProtoMessage() {}

func (x *PathMatch) ProtoReflect() protoreflect.Message {
	mi := &file_resource_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathMatch.ProtoReflect.Descriptor instead.
func (*PathMatch) Descriptor() ([]byte, []int) {
	return file_resource_proto_rawDescGZIP(), []int{8}
}

func (m *PathMatch) GetKind() isPathMatch_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *PathMatch) GetExact() string {
	if x, ok := x.GetKind().(*PathMatch_Exact); ok {
		return x.Exact
	}
	return ""
}

func (x *PathMatch) GetPathPrefix() string {
	if x, ok := x.GetKind().(*PathMatch_PathPrefix); ok {
		return x.PathPrefix
	}
	return ""
}

func (x *PathMatch) GetRegex() string {
	if x, ok := x.GetKind().(*PathMatch_Regex); ok {
		return x.Regex
	}
	return ""
}

type isPathMatch_Kind interface {
	isPathMatch_Kind()
}

type PathMatch_Exact struct {
	Exact string `protobuf:"bytes,1,opt,name=exact,proto3,oneof"`
}

type PathMatch_PathPrefix struct {
	PathPrefix string `protobuf:"bytes,2,opt,name=path_prefix,json=pathPrefix,proto3,oneof"`
}

type PathMatch_Regex struct {
	Regex string `protobuf:"bytes,3,opt,name=regex,proto3,oneof"`
}

func (*PathMatch_Exact) isPathMatch_Kind() {}

func (*PathMatch_PathPrefix) isPathMatch_Kind() {}

func (*PathMatch_Regex) isPathMatch_Kind() {}

type QueryMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Value:
	//
	//	*QueryMatch_Exact
	//	*QueryMatch_Regex
	Value isQueryMatch_Value `protobuf_oneof:"value"`
}

func (x *QueryMatch) Reset() {
	*x = QueryMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMatch) ProtoMessage() {}

func (x *QueryMatch) ProtoReflect() protoreflect.Message {
	mi := &file_resource_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMatch.ProtoReflect.Descriptor instead.
func (*QueryMatch) Descriptor() ([]byte, []int) {
	return file_resource_proto_rawDescGZIP(), []int{9}
}

func (x *QueryMatch) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *QueryMatch) GetValue() isQueryMatch_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *QueryMatch) GetExact() string {
	if x, ok := x.GetValue().(*QueryMatch_Exact); ok {
		return x.Exact
	}
	return ""
}

func (x *QueryMatch) GetRegex() string {
	if x, ok := x.GetValue().(*QueryMatch_Regex); ok {
		return x.Regex
	}
	return ""
}

type isQueryMatch_Value interface {
	isQueryMatch_Value()
}

type QueryMatch_Exact struct {
	Exact string `protobuf:"bytes,2,opt,name=exact,proto3,oneof"`
}

type QueryMatch_Regex struct {
	Regex string `protobuf:"bytes,3,opt,name=regex,proto3,oneof"`
}

func (*QueryMatch_Exact) isQueryMatch_Value() {}

func (*QueryMatch_Regex) isQueryMatch_Value() {}

type MethodMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exact string `protobuf:"bytes,1,opt,name=exact,proto3" json:"exact,omitempty"`
}

func (x *MethodMatch) Reset() {
	*x = MethodMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodMatch) ProtoMessage() {}

func (x *MethodMatch) ProtoReflect() protoreflect.Message {
	mi := &file_resource_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodMatch.ProtoReflect.Descriptor instead.
func (*MethodMatch) Descriptor() ([]byte, []int) {
	return file_resource_proto_rawDescGZIP(), []int{10}
}

func (x *MethodMatch) GetExact() string {
	if x != nil {
		return x.Exact
	}
	return ""
}

type HeaderMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Value:
	//
	//	*HeaderMatch_Exact
	//	*HeaderMatch_Regex
	Value isHeaderMatch_Value `protobuf_oneof:"value"`
}

func (x *HeaderMatch) Reset() {
	*x = HeaderMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderMatch) ProtoMessage() {}

func (x *HeaderMatch) ProtoReflect() protoreflect.Message {
	mi := &file_resource_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderMatch.ProtoReflect.Descriptor instead.
func (*HeaderMatch) Descriptor() ([]byte, []int) {
	return file_resource_proto_rawDescGZIP(), []int{11}
}

func (x *HeaderMatch) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *HeaderMatch) GetValue() isHeaderMatch_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *HeaderMatch) GetExact() string {
	if x, ok := x.GetValue().(*HeaderMatch_Exact); ok {
		return x.Exact
	}
	return ""
}

func (x *HeaderMatch) GetRegex() string {
	if x, ok := x.GetValue().(*HeaderMatch_Regex); ok {
		return x.Regex
	}
	return ""
}

type isHeaderMatch_Value interface {
	isHeaderMatch_Value()
}

type HeaderMatch_Exact struct {
	Exact string `protobuf:"bytes,2,opt,name=exact,proto3,oneof"`
}

type HeaderMatch_Regex struct {
	Regex string `protobuf:"bytes,3,opt,name=regex,proto3,oneof"`
}

func (*HeaderMatch_Exact) isHeaderMatch_Value() {}

func (*HeaderMatch_Regex) isHeaderMatch_Value() {}

type RouteFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*RouteFilter_RequestHeaderModifier
	//	*RouteFilter_ResponseHeaderModifier
	//	*RouteFilter_RequestRedirect
	//	*RouteFilter_UrlRewrite
	//	*RouteFilter_RequestMirror
	Kind isRouteFilter_Kind `protobuf_oneof:"kind"`
}

func (x *RouteFilter) Reset() {
	*x = RouteFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteFilter) ProtoMessage() {}

func (x *RouteFilter) ProtoReflect() protoreflect.Message {
	mi := &file_resource_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteFilter.ProtoReflect.Descriptor instead.
func (*RouteFilter) Descriptor() ([]byte, []int) {
	return file_resource_proto_rawDescGZIP(), []int{12}
}

func (m *RouteFilter) GetKind() isRouteFilter_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *RouteFilter) GetRequestHeaderModifier() *HeaderModifier {
	if x, ok := x.GetKind().(*RouteFilter_RequestHeaderModifier); ok {
		return x.RequestHeaderModifier
	}
	return nil
}

func (x *RouteFilter) GetResponseHeaderModifier() *HeaderModifier {
	if x, ok := x.GetKind().(*RouteFilter_ResponseHeaderModifier); ok {
		return x.ResponseHeaderModifier
	}
	return nil
}

func (x *RouteFilter) GetRequestRedirect() *RequestRedirect {
	if x, ok := x.GetKind().(*RouteFilter_RequestRedirect); ok {
		return x.RequestRedirect
	}
	return nil
}

func (x *RouteFilter) GetUrlRewrite() *UrlRewrite {
	if x, ok := x.GetKind().(*RouteFilter_UrlRewrite); ok {
		return x.UrlRewrite
	}
	return nil
}

func (x *RouteFilter) GetRequestMirror() *RequestMirror {
	if x, ok := x.GetKind().(*RouteFilter_RequestMirror); ok {
		return x.RequestMirror
	}
	return nil
}

type isRouteFilter_Kind interface {
	isRouteFilter_Kind()
}

type RouteFilter_RequestHeaderModifier struct {
	RequestHeaderModifier *HeaderModifier `protobuf:"bytes,1,opt,name=request_header_modifier,json=requestHeaderModifier,proto3,oneof"`
}

type RouteFilter_ResponseHeaderModifier struct {
	ResponseHeaderModifier *HeaderModifier `protobuf:"bytes,2,opt,name=response_header_modifier,json=responseHeaderModifier,proto3,oneof"`
}

type RouteFilter_RequestRedirect struct {
	RequestRedirect *RequestRedirect `protobuf:"bytes,3,opt,name=request_redirect,json=requestRedirect,proto3,oneof"`
}

type RouteFilter_UrlRewrite struct {
	UrlRewrite *UrlRewrite `protobuf:"bytes,4,opt,name=url_rewrite,json=urlRewrite,proto3,oneof"`
}

type RouteFilter_RequestMirror struct {
	RequestMirror *RequestMirror `protobuf:"bytes,5,opt,name=request_mirror,json=requestMirror,proto3,oneof"`
}

func (*RouteFilter_RequestHeaderModifier) isRouteFilter_Kind() {}

func (*RouteFilter_ResponseHeaderModifier) isRouteFilter_Kind() {}

func (*RouteFilter_RequestRedirect) isRouteFilter_Kind() {}

func (*RouteFilter_UrlRewrite) isRouteFilter_Kind() {}

func (*RouteFilter_RequestMirror) isRouteFilter_Kind() {}

type HeaderModifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Add    []*Header `protobuf:"bytes,1,rep,name=add,proto3" json:"add,omitempty"`
	Set    []*Header `protobuf:"bytes,2,rep,name=set,proto3" json:"set,omitempty"`
	Remove []string  `protobuf:"bytes,3,rep,name=remove,proto3" json:"remove,omitempty"`
}

func (x *HeaderModifier) Reset() {
	*x = HeaderModifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderModifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderModifier) ProtoMessage() {}

func (x *HeaderModifier) ProtoReflect() protoreflect.Message {
	mi := &file_resource_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderModifier.ProtoReflect.Descriptor instead.
func (*HeaderModifier) Descriptor() ([]byte, []int) {
	return file_resource_proto_rawDescGZIP(), []int{13}
}

func (x *HeaderModifier) GetAdd() []*Header {
	if x != nil {
		return x.Add
	}
	return nil
}

func (x *HeaderModifier) GetSet() []*Header {
	if x != nil {
		return x.Set
	}
	return nil
}

func (x *HeaderModifier) GetRemove() []string {
	if x != nil {
		return x.Remove
	}
	return nil
}

type RequestMirror struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*RequestMirror_Service
	Kind isRequestMirror_Kind `protobuf_oneof:"kind"`
	// 0-100
	Percentage float64 `protobuf:"fixed64,2,opt,name=percentage,proto3" json:"percentage,omitempty"`
	Port       int32   `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *RequestMirror) Reset() {
	*x = RequestMirror{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestMirror) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestMirror) ProtoMessage() {}

func (x *RequestMirror) ProtoReflect() protoreflect.Message {
	mi := &file_resource_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestMirror.ProtoReflect.Descriptor instead.
func (*RequestMirror) Descriptor() ([]byte, []int) {
	return file_resource_proto_rawDescGZIP(), []int{14}
}

func (m *RequestMirror) GetKind() isRequestMirror_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *RequestMirror) GetService() string {
	if x, ok := x.GetKind().(*RequestMirror_Service); ok {
		return x.Service
	}
	return ""
}

func (x *RequestMirror) GetPercentage() float64 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *RequestMirror) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type isRequestMirror_Kind interface {
	isRequestMirror_Kind()
}

type RequestMirror_Service struct {
	Service string `protobuf:"bytes,1,opt,name=service,proto3,oneof"`
}

func (*RequestMirror_Service) isRequestMirror_Kind() {}

type RequestRedirect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scheme string `protobuf:"bytes,1,opt,name=scheme,proto3" json:"scheme,omitempty"`
	Host   string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// Types that are assignable to Path:
	//
	//	*RequestRedirect_Full
	//	*RequestRedirect_Prefix
	Path   isRequestRedirect_Path `protobuf_oneof:"path"`
	Port   uint32                 `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	Status uint32                 `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RequestRedirect) Reset() {
	*x = RequestRedirect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestRedirect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestRedirect) ProtoMessage() {}

func (x *RequestRedirect) ProtoReflect() protoreflect.Message {
	mi := &file_resource_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestRedirect.ProtoReflect.Descriptor instead.
func (*RequestRedirect) Descriptor() ([]byte, []int) {
	return file_resource_proto_rawDescGZIP(), []int{15}
}

func (x *RequestRedirect) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *RequestRedirect) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (m *RequestRedirect) GetPath() isRequestRedirect_Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (x *RequestRedirect) GetFull() string {
	if x, ok := x.GetPath().(*RequestRedirect_Full); ok {
		return x.Full
	}
	return ""
}

func (x *RequestRedirect) GetPrefix() string {
	if x, ok := x.GetPath().(*RequestRedirect_Prefix); ok {
		return x.Prefix
	}
	return ""
}

func (x *RequestRedirect) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *RequestRedirect) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type isRequestRedirect_Path interface {
	isRequestRedirect_Path()
}

type RequestRedirect_Full struct {
	Full string `protobuf:"bytes,3,opt,name=full,proto3,oneof"`
}

type RequestRedirect_Prefix struct {
	Prefix string `protobuf:"bytes,4,opt,name=prefix,proto3,oneof"`
}

func (*RequestRedirect_Full) isRequestRedirect_Path() {}

func (*RequestRedirect_Prefix) isRequestRedirect_Path() {}

type UrlRewrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Types that are assignable to Path:
	//
	//	*UrlRewrite_Full
	//	*UrlRewrite_Prefix
	Path isUrlRewrite_Path `protobuf_oneof:"path"`
}

func (x *UrlRewrite) Reset() {
	*x = UrlRewrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UrlRewrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UrlRewrite) ProtoMessage() {}

func (x *UrlRewrite) ProtoReflect() protoreflect.Message {
	mi := &file_resource_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UrlRewrite.ProtoReflect.Descriptor instead.
func (*UrlRewrite) Descriptor() ([]byte, []int) {
	return file_resource_proto_rawDescGZIP(), []int{16}
}

func (x *UrlRewrite) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (m *UrlRewrite) GetPath() isUrlRewrite_Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (x *UrlRewrite) GetFull() string {
	if x, ok := x.GetPath().(*UrlRewrite_Full); ok {
		return x.Full
	}
	return ""
}

func (x *UrlRewrite) GetPrefix() string {
	if x, ok := x.GetPath().(*UrlRewrite_Prefix); ok {
		return x.Prefix
	}
	return ""
}

type isUrlRewrite_Path interface {
	isUrlRewrite_Path()
}

type UrlRewrite_Full struct {
	Full string `protobuf:"bytes,2,opt,name=full,proto3,oneof"`
}

type UrlRewrite_Prefix struct {
	Prefix string `protobuf:"bytes,3,opt,name=prefix,proto3,oneof"`
}

func (*UrlRewrite_Full) isUrlRewrite_Path() {}

func (*UrlRewrite_Prefix) isUrlRewrite_Path() {}

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_resource_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_resource_proto_rawDescGZIP(), []int{17}
}

func (x *Header) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Header) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type RouteBackend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*RouteBackend_Service
	//	*RouteBackend_Backend
	Kind    isRouteBackend_Kind `protobuf_oneof:"kind"`
	Weight  int32               `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	Port    int32               `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Filters []*RouteFilter      `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *RouteBackend) Reset() {
	*x = RouteBackend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteBackend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteBackend) ProtoMessage() {}

func (x *RouteBackend) ProtoReflect() protoreflect.Message {
	mi := &file_resource_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteBackend.ProtoReflect.Descriptor instead.
func (*RouteBackend) Descriptor() ([]byte, []int) {
	return file_resource_proto_rawDescGZIP(), []int{18}
}

func (m *RouteBackend) GetKind() isRouteBackend_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *RouteBackend) GetService() string {
	if x, ok := x.GetKind().(*RouteBackend_Service); ok {
		return x.Service
	}
	return ""
}

func (x *RouteBackend) GetBackend() string {
	if x, ok := x.GetKind().(*RouteBackend_Backend); ok {
		return x.Backend
	}
	return ""
}

func (x *RouteBackend) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *RouteBackend) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *RouteBackend) GetFilters() []*RouteFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type isRouteBackend_Kind interface {
	isRouteBackend_Kind()
}

type RouteBackend_Service struct {
	Service string `protobuf:"bytes,1,opt,name=service,proto3,oneof"`
}

type RouteBackend_Backend struct {
	Backend string `protobuf:"bytes,5,opt,name=backend,proto3,oneof"`
}

func (*RouteBackend_Service) isRouteBackend_Kind() {}

func (*RouteBackend_Backend) isRouteBackend_Kind() {}

type Backend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*Backend_Mcp
	Kind isBackend_Kind `protobuf_oneof:"kind"`
}

func (x *Backend) Reset() {
	*x = Backend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backend) ProtoMessage() {}

func (x *Backend) ProtoReflect() protoreflect.Message {
	mi := &file_resource_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backend.ProtoReflect.Descriptor instead.
func (*Backend) Descriptor() ([]byte, []int) {
	return file_resource_proto_rawDescGZIP(), []int{19}
}

func (m *Backend) GetKind() isBackend_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Backend) GetMcp() *MCPBackend {
	if x, ok := x.GetKind().(*Backend_Mcp); ok {
		return x.Mcp
	}
	return nil
}

type isBackend_Kind interface {
	isBackend_Kind()
}

type Backend_Mcp struct {
	Mcp *MCPBackend `protobuf:"bytes,1,opt,name=mcp,proto3,oneof"`
}

func (*Backend_Mcp) isBackend_Kind() {}

type MCPBackend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Targets []*MCPTarget `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty"`
}

func (x *MCPBackend) Reset() {
	*x = MCPBackend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MCPBackend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCPBackend) ProtoMessage() {}

func (x *MCPBackend) ProtoReflect() protoreflect.Message {
	mi := &file_resource_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCPBackend.ProtoReflect.Descriptor instead.
func (*MCPBackend) Descriptor() ([]byte, []int) {
	return file_resource_proto_rawDescGZIP(), []int{20}
}

func (x *MCPBackend) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MCPBackend) GetTargets() []*MCPTarget {
	if x != nil {
		return x.Targets
	}
	return nil
}

type MCPTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Host      string       `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port      int32        `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	EnableTls bool         `protobuf:"varint,4,opt,name=enable_tls,json=enableTls,proto3" json:"enable_tls,omitempty"`
	Filters   []*MCPFilter `protobuf:"bytes,5,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *MCPTarget) Reset() {
	*x = MCPTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MCPTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCPTarget) ProtoMessage() {}

func (x *MCPTarget) ProtoReflect() protoreflect.Message {
	mi := &file_resource_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCPTarget.ProtoReflect.Descriptor instead.
func (*MCPTarget) Descriptor() ([]byte, []int) {
	return file_resource_proto_rawDescGZIP(), []int{21}
}

func (x *MCPTarget) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MCPTarget) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *MCPTarget) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *MCPTarget) GetEnableTls() bool {
	if x != nil {
		return x.EnableTls
	}
	return false
}

func (x *MCPTarget) GetFilters() []*MCPFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type MCPFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  string         `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Match *FilterMatcher `protobuf:"bytes,2,opt,name=match,proto3" json:"match,omitempty"`
}

func (x *MCPFilter) Reset() {
	*x = MCPFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MCPFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCPFilter) ProtoMessage() {}

func (x *MCPFilter) ProtoReflect() protoreflect.Message {
	mi := &file_resource_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCPFilter.ProtoReflect.Descriptor instead.
func (*MCPFilter) Descriptor() ([]byte, []int) {
	return file_resource_proto_rawDescGZIP(), []int{22}
}

func (x *MCPFilter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MCPFilter) GetMatch() *FilterMatcher {
	if x != nil {
		return x.Match
	}
	return nil
}

type FilterMatcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*FilterMatcher_Exact
	//	*FilterMatcher_Prefix
	//	*FilterMatcher_Suffix
	//	*FilterMatcher_Contains
	//	*FilterMatcher_Regex
	Kind isFilterMatcher_Kind `protobuf_oneof:"kind"`
}

func (x *FilterMatcher) Reset() {
	*x = FilterMatcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterMatcher) ProtoMessage() {}

func (x *FilterMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_resource_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterMatcher.ProtoReflect.Descriptor instead.
func (*FilterMatcher) Descriptor() ([]byte, []int) {
	return file_resource_proto_rawDescGZIP(), []int{23}
}

func (m *FilterMatcher) GetKind() isFilterMatcher_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *FilterMatcher) GetExact() string {
	if x, ok := x.GetKind().(*FilterMatcher_Exact); ok {
		return x.Exact
	}
	return ""
}

func (x *FilterMatcher) GetPrefix() string {
	if x, ok := x.GetKind().(*FilterMatcher_Prefix); ok {
		return x.Prefix
	}
	return ""
}

func (x *FilterMatcher) GetSuffix() string {
	if x, ok := x.GetKind().(*FilterMatcher_Suffix); ok {
		return x.Suffix
	}
	return ""
}

func (x *FilterMatcher) GetContains() string {
	if x, ok := x.GetKind().(*FilterMatcher_Contains); ok {
		return x.Contains
	}
	return ""
}

func (x *FilterMatcher) GetRegex() string {
	if x, ok := x.GetKind().(*FilterMatcher_Regex); ok {
		return x.Regex
	}
	return ""
}

type isFilterMatcher_Kind interface {
	isFilterMatcher_Kind()
}

type FilterMatcher_Exact struct {
	Exact string `protobuf:"bytes,1,opt,name=exact,proto3,oneof"`
}

type FilterMatcher_Prefix struct {
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3,oneof"`
}

type FilterMatcher_Suffix struct {
	Suffix string `protobuf:"bytes,3,opt,name=suffix,proto3,oneof"`
}

type FilterMatcher_Contains struct {
	Contains string `protobuf:"bytes,4,opt,name=contains,proto3,oneof"`
}

type FilterMatcher_Regex struct {
	Regex string `protobuf:"bytes,5,opt,name=regex,proto3,oneof"`
}

func (*FilterMatcher_Exact) isFilterMatcher_Kind() {}

func (*FilterMatcher_Prefix) isFilterMatcher_Kind() {}

func (*FilterMatcher_Suffix) isFilterMatcher_Kind() {}

func (*FilterMatcher_Contains) isFilterMatcher_Kind() {}

func (*FilterMatcher_Regex) isFilterMatcher_Kind() {}

var File_resource_proto protoreflect.FileDescriptor

var file_resource_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x19, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64,
	0x65, 0x76, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc6, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x62, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x42, 0x69,
	0x6e, 0x64, 0x48, 0x00, 0x52, 0x04, 0x62, 0x69, 0x6e, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x38, 0x0a,
	0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22,
	0x2c, 0x0a, 0x04, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x83, 0x02,
	0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x36, 0x0a, 0x03, 0x74,
	0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03,
	0x74, 0x6c, 0x73, 0x22, 0x40, 0x0a, 0x09, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x63, 0x65, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x22, 0xaf, 0x03, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3f,
	0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64,
	0x65, 0x76, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12,
	0x40, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x43, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x08, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x65,
	0x76, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xde, 0x01, 0x0a, 0x08, 0x54, 0x63, 0x70, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x08,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x51, 0x0a, 0x17, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x42, 0x0a,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x22, 0x92, 0x02, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x38, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x65,
	0x76, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x40, 0x0a, 0x07, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x48, 0x0a, 0x0c,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x66, 0x0a, 0x09, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x0b, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x16,
	0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x59,
	0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x23, 0x0a, 0x0b, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x61, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x22, 0x5a,
	0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x72, 0x65, 0x67,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65,
	0x78, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd7, 0x03, 0x0a, 0x0b, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x17, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x65, 0x0a, 0x18, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x16,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12,
	0x48, 0x0a, 0x0b, 0x75, 0x72, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x75,
	0x72, 0x6c, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x06, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x0e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x03, 0x61, 0x64, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x03, 0x61, 0x64, 0x64, 0x12, 0x33, 0x0a, 0x03,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x03, 0x73, 0x65,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0x67, 0x0a, 0x0d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x06,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x58, 0x0a, 0x0a, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x66, 0x75, 0x6c, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x12, 0x18,
	0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x06, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x22, 0x32, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x22, 0x4c, 0x0a, 0x07, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x39,
	0x0a, 0x03, 0x6d, 0x63, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4d, 0x43, 0x50, 0x42, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x63, 0x70, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x22, 0x60, 0x0a, 0x0a, 0x4d, 0x43, 0x50, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x4d, 0x43, 0x50, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x09, 0x4d, 0x43, 0x50, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6c, 0x73, 0x12, 0x3e, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4d, 0x43, 0x50, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x5f, 0x0a, 0x09,
	0x4d, 0x43, 0x50, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a,
	0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x64, 0x65, 0x76, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x99, 0x01,
	0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x1c, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x05, 0x72, 0x65, 0x67,
	0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65,
	0x78, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x2a, 0x49, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x48, 0x54, 0x54, 0x50, 0x53, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x4c, 0x53, 0x10, 0x03,
	0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x50, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x42, 0x4f,
	0x4e, 0x45, 0x10, 0x05, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x67, 0x6f, 0x2f,
	0x61, 0x70, 0x69, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_resource_proto_rawDescOnce sync.Once
	file_resource_proto_rawDescData = file_resource_proto_rawDesc
)

func file_resource_proto_rawDescGZIP() []byte {
	file_resource_proto_rawDescOnce.Do(func() {
		file_resource_proto_rawDescData = protoimpl.X.CompressGZIP(file_resource_proto_rawDescData)
	})
	return file_resource_proto_rawDescData
}

var file_resource_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_resource_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_resource_proto_goTypes = []interface{}{
	(Protocol)(0),             // 0: agentgateway.dev.resource.Protocol
	(*Resource)(nil),          // 1: agentgateway.dev.resource.Resource
	(*Bind)(nil),              // 2: agentgateway.dev.resource.Bind
	(*Listener)(nil),          // 3: agentgateway.dev.resource.Listener
	(*TLSConfig)(nil),         // 4: agentgateway.dev.resource.TLSConfig
	(*Route)(nil),             // 5: agentgateway.dev.resource.Route
	(*TcpRoute)(nil),          // 6: agentgateway.dev.resource.TcpRoute
	(*TrafficPolicy)(nil),     // 7: agentgateway.dev.resource.TrafficPolicy
	(*RouteMatch)(nil),        // 8: agentgateway.dev.resource.RouteMatch
	(*PathMatch)(nil),         // 9: agentgateway.dev.resource.PathMatch
	(*QueryMatch)(nil),        // 10: agentgateway.dev.resource.QueryMatch
	(*MethodMatch)(nil),       // 11: agentgateway.dev.resource.MethodMatch
	(*HeaderMatch)(nil),       // 12: agentgateway.dev.resource.HeaderMatch
	(*RouteFilter)(nil),       // 13: agentgateway.dev.resource.RouteFilter
	(*HeaderModifier)(nil),    // 14: agentgateway.dev.resource.HeaderModifier
	(*RequestMirror)(nil),     // 15: agentgateway.dev.resource.RequestMirror
	(*RequestRedirect)(nil),   // 16: agentgateway.dev.resource.RequestRedirect
	(*UrlRewrite)(nil),        // 17: agentgateway.dev.resource.UrlRewrite
	(*Header)(nil),            // 18: agentgateway.dev.resource.Header
	(*RouteBackend)(nil),      // 19: agentgateway.dev.resource.RouteBackend
	(*Backend)(nil),           // 20: agentgateway.dev.resource.Backend
	(*MCPBackend)(nil),        // 21: agentgateway.dev.resource.MCPBackend
	(*MCPTarget)(nil),         // 22: agentgateway.dev.resource.MCPTarget
	(*MCPFilter)(nil),         // 23: agentgateway.dev.resource.MCPFilter
	(*FilterMatcher)(nil),     // 24: agentgateway.dev.resource.FilterMatcher
	(*duration.Duration)(nil), // 25: google.protobuf.Duration
}
var file_resource_proto_depIdxs = []int32{
	2,  // 0: agentgateway.dev.resource.Resource.bind:type_name -> agentgateway.dev.resource.Bind
	3,  // 1: agentgateway.dev.resource.Resource.listener:type_name -> agentgateway.dev.resource.Listener
	5,  // 2: agentgateway.dev.resource.Resource.route:type_name -> agentgateway.dev.resource.Route
	0,  // 3: agentgateway.dev.resource.Listener.protocol:type_name -> agentgateway.dev.resource.Protocol
	4,  // 4: agentgateway.dev.resource.Listener.tls:type_name -> agentgateway.dev.resource.TLSConfig
	8,  // 5: agentgateway.dev.resource.Route.matches:type_name -> agentgateway.dev.resource.RouteMatch
	13, // 6: agentgateway.dev.resource.Route.filters:type_name -> agentgateway.dev.resource.RouteFilter
	19, // 7: agentgateway.dev.resource.Route.backends:type_name -> agentgateway.dev.resource.RouteBackend
	7,  // 8: agentgateway.dev.resource.Route.traffic_policy:type_name -> agentgateway.dev.resource.TrafficPolicy
	19, // 9: agentgateway.dev.resource.TcpRoute.backends:type_name -> agentgateway.dev.resource.RouteBackend
	25, // 10: agentgateway.dev.resource.TrafficPolicy.backend_request_timeout:type_name -> google.protobuf.Duration
	25, // 11: agentgateway.dev.resource.TrafficPolicy.request_timeout:type_name -> google.protobuf.Duration
	9,  // 12: agentgateway.dev.resource.RouteMatch.path:type_name -> agentgateway.dev.resource.PathMatch
	12, // 13: agentgateway.dev.resource.RouteMatch.headers:type_name -> agentgateway.dev.resource.HeaderMatch
	11, // 14: agentgateway.dev.resource.RouteMatch.method:type_name -> agentgateway.dev.resource.MethodMatch
	10, // 15: agentgateway.dev.resource.RouteMatch.query_params:type_name -> agentgateway.dev.resource.QueryMatch
	14, // 16: agentgateway.dev.resource.RouteFilter.request_header_modifier:type_name -> agentgateway.dev.resource.HeaderModifier
	14, // 17: agentgateway.dev.resource.RouteFilter.response_header_modifier:type_name -> agentgateway.dev.resource.HeaderModifier
	16, // 18: agentgateway.dev.resource.RouteFilter.request_redirect:type_name -> agentgateway.dev.resource.RequestRedirect
	17, // 19: agentgateway.dev.resource.RouteFilter.url_rewrite:type_name -> agentgateway.dev.resource.UrlRewrite
	15, // 20: agentgateway.dev.resource.RouteFilter.request_mirror:type_name -> agentgateway.dev.resource.RequestMirror
	18, // 21: agentgateway.dev.resource.HeaderModifier.add:type_name -> agentgateway.dev.resource.Header
	18, // 22: agentgateway.dev.resource.HeaderModifier.set:type_name -> agentgateway.dev.resource.Header
	13, // 23: agentgateway.dev.resource.RouteBackend.filters:type_name -> agentgateway.dev.resource.RouteFilter
	21, // 24: agentgateway.dev.resource.Backend.mcp:type_name -> agentgateway.dev.resource.MCPBackend
	22, // 25: agentgateway.dev.resource.MCPBackend.targets:type_name -> agentgateway.dev.resource.MCPTarget
	23, // 26: agentgateway.dev.resource.MCPTarget.filters:type_name -> agentgateway.dev.resource.MCPFilter
	24, // 27: agentgateway.dev.resource.MCPFilter.match:type_name -> agentgateway.dev.resource.FilterMatcher
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_resource_proto_init() }
func file_resource_proto_init() {
	if File_resource_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_resource_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Listener); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcpRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaderMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaderModifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestMirror); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestRedirect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UrlRewrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteBackend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MCPBackend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MCPTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MCPFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterMatcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_resource_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Resource_Bind)(nil),
		(*Resource_Listener)(nil),
		(*Resource_Route)(nil),
	}
	file_resource_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*PathMatch_Exact)(nil),
		(*PathMatch_PathPrefix)(nil),
		(*PathMatch_Regex)(nil),
	}
	file_resource_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*QueryMatch_Exact)(nil),
		(*QueryMatch_Regex)(nil),
	}
	file_resource_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*HeaderMatch_Exact)(nil),
		(*HeaderMatch_Regex)(nil),
	}
	file_resource_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*RouteFilter_RequestHeaderModifier)(nil),
		(*RouteFilter_ResponseHeaderModifier)(nil),
		(*RouteFilter_RequestRedirect)(nil),
		(*RouteFilter_UrlRewrite)(nil),
		(*RouteFilter_RequestMirror)(nil),
	}
	file_resource_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*RequestMirror_Service)(nil),
	}
	file_resource_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*RequestRedirect_Full)(nil),
		(*RequestRedirect_Prefix)(nil),
	}
	file_resource_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*UrlRewrite_Full)(nil),
		(*UrlRewrite_Prefix)(nil),
	}
	file_resource_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*RouteBackend_Service)(nil),
		(*RouteBackend_Backend)(nil),
	}
	file_resource_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*Backend_Mcp)(nil),
	}
	file_resource_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*FilterMatcher_Exact)(nil),
		(*FilterMatcher_Prefix)(nil),
		(*FilterMatcher_Suffix)(nil),
		(*FilterMatcher_Contains)(nil),
		(*FilterMatcher_Regex)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_resource_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_resource_proto_goTypes,
		DependencyIndexes: file_resource_proto_depIdxs,
		EnumInfos:         file_resource_proto_enumTypes,
		MessageInfos:      file_resource_proto_msgTypes,
	}.Build()
	File_resource_proto = out.File
	file_resource_proto_rawDesc = nil
	file_resource_proto_goTypes = nil
	file_resource_proto_depIdxs = nil
}
